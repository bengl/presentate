#!/usr/bin/env node

var presentate = require('../index');
var program = require('commander');
var fs = require('fs');
var path = require('path');

program.version(require('../package').version)
  .usage('[options]')
  .option('-T --telnet [port]', 'telnet viewer port number')
  .option('-t --top [num]', 'lines of padding from the top (default: 1)')
  .option('-l --left [num]', 'columns of padding from the left (default: 3)')
  .option('-c --center [WxH]', 'center in the terminal, with width w and height H')
  .option('-f --file [filename]', 'a slides file (default: ./slides.presentate)')
  .option('-A --all', 'show all the slides at once, delimited by "\\n---\\n"')
  .option('-N --notes [port]', 'telnet notes port number')
  .option('-s --sizing_slide', 'insert a sizing slide at the beginning')
  .option('-H --html ', 'generate HTML version of "--all" (add your own CSS)')
  .parse(process.argv);

program.file = program.file || path.resolve(process.cwd(), 'slides.presentate');
if (!program.file || !fs.existsSync(program.file)) {
  // default to intro presentation
  program.file = path.resolve(__dirname, '..', 'slides.presentate');
}

var slides = fs.readFileSync(program.file).toString('utf8');

var split = slides.split(/\n===\n/);
if (split.length === 2) {
  var data = JSON.parse(split[0]);
  data.slides = split[split.length-1];
  slides = data;
  for (var x in slides)
    if (!program[x]) program[x] = slides[x];
} else {
  program.slides = slides;
}

if (typeof program.top !== 'string' && typeof program.top !== 'number')
  program.top = 1;

if (typeof program.left !== 'string' && typeof program.left !== 'number')
  program.left = 3;

program.top = parseInt(program.top);
program.left = parseInt(program.left);
if (program.all || program.html) {
  var all = presentate.prepareSlides(
    null, program.slides, program.top, program.left
  ).join(Array(program.top+1).join('\n')+'\n---\n');
  if (program.all) console.log(all);
  else presentate.html(all);
} else if (program.telnet) {
  presentate.telnet(program);
}  else {
  presentate(program, process.stdin, process.stdout);
}
