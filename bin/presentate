#!/usr/bin/env node
var presentate = require('../index');
var program = require('commander');
var fs = require('fs');

program.version(require('../package').version)
  .usage('[options]')
  .option('-T --telnet [num]', 'telnet viewer port number (optional)')
  .option('-t --top [num]', 'lines of padding from the top (default: 1)')
  .option('-l --left [num]', 'columns of padding from the left (default: 3)')
  .option('-f --file [filename]', 'a slides.js file (default: ./pslides.js)')
  .option('-A --all ', 'show all the slides at once, delimited by "\\n---\\n"')
  .option('-H --html ', 'generate HTML version of "--all" (add your own CSS)')
  .parse(process.argv);

var port, slideFileName = program.file || process.cwd()+'/slides.presentate';
if (!program.file && !fs.existsSync(slideFileName)) {
  slideFileName = process.cwd() + '/pslides.js';
}

var slides = slideFileName.match(/.*\.presentate$/) ?
             fs.readFileSync(slideFileName).toString('utf8') :
             require(slideFileName);

if (typeof slides === 'string') {
  var split = slides.split(/\n===\n/);
  if (split.length === 2) {
    var data = JSON.parse(split[0]);
    data.slides = split[split.length-1];
    slides = data;
  }
}

if (typeof slides === 'object') {
  for (var x in slides) program[x] = slides[x];
}

if (slides.slides) {
  slides = slides.slides;
}

var top = parseInt(program.top || 1);
var left = parseInt(program.left || 3);
if (program.all) {
  console.log(presentate.prepareSlides(slides, top, left).join(Array(top+1).join('\n')+'\n---\n'));
} else if (program.telnet) {
  presentate.telnet(slides, top, left, program.telnet); 
} else if (program.html) {
  var all = presentate.prepareSlides(slides, top, left).join(Array(top+1).join('\n')+'\n---\n');
  presentate.html(all);
} else {
  presentate(slides, top, left, process.stdin, process.stdout);
}
